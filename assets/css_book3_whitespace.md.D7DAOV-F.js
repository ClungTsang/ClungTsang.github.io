import{_ as e,c as a,b0 as i,o as t}from"./chunks/framework.D6xZgKGL.js";const k=JSON.parse('{"title":"white-space的用法","description":"","frontmatter":{},"headers":[],"relativePath":"css/book3_whitespace.md","filePath":"css/book3_whitespace.md","lastUpdated":1690733455000}'),p={name:"css/book3_whitespace.md"};function c(o,s,l,n,d,h){return t(),a("div",null,s[0]||(s[0]=[i(`<h1 id="white-space的用法" tabindex="-1">white-space的用法 <a class="header-anchor" href="#white-space的用法" aria-label="Permalink to &quot;white-space的用法&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>white-space</code>属性用于控制元素内部文本的空白处理方式。</p></div><ul><li><code>normal</code>：默认值，连续的空白字符会被合并为一个空格，换行符会被当作空格处理。</li><li><code>nowrap</code>：连续的空白字符不会被合并，文本会在同一行上显示，直到遇到换行符为止。</li><li><code>pre</code>：连续的空白字符不会被合并，文本会按照实际的换行和空白字符显示。</li><li><code>pre-wrap</code>：连续的空白字符不会被合并，文本会按照实际的换行显示，但是长单词会超出容器边界换行。</li><li><code>pre-line</code>：连续的空白字符会被合并为一个空格，文本会按照实际的换行显示，长单词会超出容器边界换行。</li></ul><p>您可以通过在CSS样式中使用<code>white-space</code>属性来设置文本的空白处理方式，例如：</p><div class="language-css vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">p</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  white-space</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nowrap</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>这将使<code>&lt;p&gt;</code>元素中的文本在同一行上显示，直到遇到换行符为止。您可以根据需要选择适合的<code>white-space</code>值来控制文本的空白处理方式。</p>`,6)]))}const _=e(p,[["render",c]]);export{k as __pageData,_ as default};
