import{_ as o,c as a,b0 as c,o as t}from"./chunks/framework.D6xZgKGL.js";const u=JSON.parse('{"title":"隐式转化引申的拓展问题","description":"","frontmatter":{},"headers":[],"relativePath":"js/book3_trans.md","filePath":"js/book3_trans.md","lastUpdated":1690733455000}'),d={name:"js/book3_trans.md"};function r(p,e,s,i,l,n){return t(),a("div",null,e[0]||(e[0]=[c('<h1 id="隐式转化引申的拓展问题" tabindex="-1">隐式转化引申的拓展问题 <a class="header-anchor" href="#隐式转化引申的拓展问题" aria-label="Permalink to &quot;隐式转化引申的拓展问题&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>1、字符串和数字比较的时候，字符串先转换成数字。<br> 2、有布尔值参与比较的时候，布尔值先转换成数字。<br> 3、对象类型参与比较的时候，根据toPrimitive原则进行转换，具体为，先调用valueOf()，如果没有返回原始类型，则再调用toSting()返回原始类型</p></div><h2 id="结果是什么" tabindex="-1">[] == ![] 结果是什么 <a class="header-anchor" href="#结果是什么" aria-label="Permalink to &quot;[] == ![] 结果是什么&quot;">​</a></h2><p>结果是 <code>true</code>。</p><p>这涉及到 JavaScript 中的隐式类型转换和运算符优先级的概念。</p><p>首先，<code>!</code> 是逻辑非运算符，它将操作数转换为布尔值并取反。对于非空数组 <code>[]</code> 来说，它被视为真值，所以 <code>![]</code> 的结果是 <code>false</code>。</p><p>然后，对于相等运算符 <code>==</code>，当操作数的类型不同时，会进行隐式类型转换。在这个表达式中，左操作数是一个空数组 <code>[]</code>，右操作数是一个布尔值 <code>false</code>。</p><p>在进行比较之前，JavaScript 会尝试将两个操作数转换为相同的类型。在这里，由于操作数类型不同，JavaScript 会将布尔值 <code>false</code> 转换为数字类型。在数字类型转换中，<code>false</code> 被转换为数字 <code>0</code>。</p><p>接下来，将两个操作数都转换为数字类型后，比较的表达式变为 <code>[] == 0</code>。</p><p>在比较数组和数字时，JavaScript 会将数组转换为字符串。因此，<code>[]</code> 被转换为空字符串 <code>&quot;&quot;</code>。</p><p>现在，比较的表达式变为 <code>&quot;&quot; == 0</code>。</p><p>在比较字符串和数字时，JavaScript 会尝试将字符串转换为数字。由于 <code>&quot;&quot;</code> 在转换为数字时无法得到有效的数字，它会被转换为 <code>0</code>。</p><p>最终，比较的表达式变为 <code>0 == 0</code>。</p><p>由于比较的操作数相等，所以最终的结果是 <code>true</code>。</p><p>这个结果可能会令人困惑，因为看起来一个空数组和布尔值 <code>false</code> 应该是不相等的。但是，在 JavaScript 中，隐式类型转换和运算符优先级会导致这样的结果。为了避免这种混淆，通常建议使用严格相等运算符 <code>===</code>，它不会进行类型转换，只有在操作数类型相同且值相等时才返回 <code>true</code>。</p><h2 id="拓展阅读" tabindex="-1">拓展阅读 <a class="header-anchor" href="#拓展阅读" aria-label="Permalink to &quot;拓展阅读&quot;">​</a></h2><ol><li><a href="https://juejin.cn/post/6844903694039777288" target="_blank" rel="noreferrer">从一道面试题说起—js隐式转换踩坑合集</a></li></ol>',17)]))}const f=o(d,[["render",r]]);export{u as __pageData,f as default};
