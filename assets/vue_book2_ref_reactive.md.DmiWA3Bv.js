import{_ as i,c as a,b0 as e,o as n}from"./chunks/framework.D6xZgKGL.js";const o=JSON.parse('{"title":"ref、reactive的使用","description":"","frontmatter":{},"headers":[],"relativePath":"vue/book2_ref&reactive.md","filePath":"vue/book2_ref&reactive.md","lastUpdated":1690733455000}'),t={name:"vue/book2_ref&reactive.md"};function l(h,s,p,k,r,c){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="ref、reactive的使用" tabindex="-1">ref、reactive的使用 <a class="header-anchor" href="#ref、reactive的使用" aria-label="Permalink to &quot;ref、reactive的使用&quot;">​</a></h1><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>当使用 Vue 3 时，我们有两个主要的响应式 API：<code>ref</code> 和 <code>reactive</code>。它们都用于创建响应式数据，但在使用方式和适用场景上有一些区别。</p></div><h2 id="ref" tabindex="-1"><code>ref</code> <a class="header-anchor" href="#ref" aria-label="Permalink to &quot;\`ref\`&quot;">​</a></h2><p><code>ref</code> 是 Vue 3 中的一个函数，它接收一个初始值作为参数，并返回一个包装后的响应式对象。<code>ref</code> 可以用来包装基本类型的值，例如数字、字符串、布尔值等。它的使用方式如下：</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { ref } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> count</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ref</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：0</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">count.value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(count.value); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：1</span></span></code></pre></div><p>在模板中使用 <code>ref</code> 时，需要通过 <code>.value</code> 来访问和修改值。</p><h2 id="reactive" tabindex="-1"><code>reactive</code> <a class="header-anchor" href="#reactive" aria-label="Permalink to &quot;\`reactive\`&quot;">​</a></h2><p><code>reactive</code> 是 Vue 3 中的另一个函数，它接收一个普通对象作为参数，并返回一个响应式代理对象。<code>reactive</code> 可以用来包装对象、数组等复杂类型的值。它的使用方式如下：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { reactive } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;vue&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> state</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> reactive</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  name: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;John&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  age: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">25</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.name); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：John</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">state.age</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">; </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 更新值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(state.age); </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出：26</span></span></code></pre></div><p>在模板中使用 <code>reactive</code> 时，可以直接访问和修改对象的属性。</p><h2 id="区别和使用场景" tabindex="-1">区别和使用场景 <a class="header-anchor" href="#区别和使用场景" aria-label="Permalink to &quot;区别和使用场景&quot;">​</a></h2><ul><li><code>ref</code> 只能包装基本类型的值，而 <code>reactive</code> 可以包装对象、数组等复杂类型的值。</li><li>使用 <code>ref</code> 包装的值，在模板中需要通过 <code>.value</code> 来访问和修改；而使用 <code>reactive</code> 包装的值，在模板中可以直接访问和修改属性。</li><li><code>ref</code> 适用于单个值的场景，例如计数器、开关等简单的状态；而 <code>reactive</code> 适用于复杂的数据结构，例如表单数据、组件状态等。</li></ul><p>总结起来，<code>ref</code> 适用于简单的值类型，而 <code>reactive</code> 适用于复杂的对象类型。根据具体的使用场景，选择合适的响应式 API 可以提高代码的可读性和维护性。</p><p>希望这篇文章对你有所帮助！</p><h2 id="拓展阅读" tabindex="-1">拓展阅读 <a class="header-anchor" href="#拓展阅读" aria-label="Permalink to &quot;拓展阅读&quot;">​</a></h2><ul><li><a href="https://zhuanlan.zhihu.com/p/576462683" target="_blank" rel="noreferrer">全方位带你掌握 ref、reactive，开启 Vue3 响应式的大门</a></li></ul>`,16)]))}const E=i(t,[["render",l]]);export{o as __pageData,E as default};
